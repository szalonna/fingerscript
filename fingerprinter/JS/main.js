// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var baseColor, canvas, cnt, container, counter, ctx, drawRawData, droptext, handleDragOver, handleDrop, hideModal, interFunc, items, modal, onClick, onMessage, setCanvasSize, showModal, textarea, textpos, worker,
    _this = this;

  baseColor = "#f5f5f5";

  canvas = document.getElementById("canvas");

  container = document.getElementById("container");

  textarea = (document.getElementsByTagName("textarea"))[0];

  setCanvasSize = function(w, h) {
    canvas.width = w;
    return canvas.height = h;
  };

  setCanvasSize(container.clientWidth, container.clientHeight);

  ctx = canvas.getContext("2d");

  ctx.fillStyle = baseColor;

  ctx.fillRect(0, 0, canvas.width, canvas.height);

  droptext = "Dropzone";

  ctx.font = "30px sans-serif";

  textpos = {
    left: (canvas.width - (ctx.measureText(droptext)).width) / 2,
    top: canvas.height / 2
  };

  ctx.fillStyle = "#999999";

  ctx.fillText(droptext, textpos.left, textpos.top - 1);

  ctx.fillStyle = "#cccccc";

  ctx.fillText(droptext, textpos.left, textpos.top);

  modal = document.getElementById("modal");

  items = modal.getElementsByTagName("li");

  counter = 1;

  interFunc = function() {
    items[counter - 1].style.opacity = 0;
    items[counter].style.opacity = 1;
    counter++;
    if (counter === items.length) {
      counter = 1;
      items[0].style.opacity = 1;
      return items[items.length - 1].style.opacity = 0;
    }
  };

  cnt = setInterval(interFunc, 1000);

  showModal = function() {
    return modal.style.display = "block";
  };

  hideModal = function() {
    return modal.style.display = "none";
  };

  Worker.prototype.sendPacket = function(packet) {
    showModal();
    this.postMessage(JSON.stringify(packet));
  };

  Worker.prototype.sendCommand = function(command) {
    var c;
    c = {
      type: command
    };
    this.sendPacket(c);
  };

  drawRawData = function(width, height, raw) {
    var i, imageData, _i, _ref;
    showModal();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    setCanvasSize(width, height);
    imageData = ctx.createImageData(width, height);
    for (i = _i = 0, _ref = raw.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      imageData.data[i] = raw[i];
    }
    ctx.putImageData(imageData, 0, 0);
    hideModal();
  };

  onMessage = function(e) {
    var data;
    data = JSON.parse(e.data);
    if ((typeof console[data.type]) === "function") {
      console[data.type](data.message);
    } else {
      switch (data.type) {
        case "redraw":
          drawRawData(data.message.width, data.message.height, data.message.pixels);
          hideModal();
          break;
        case "points":
          textarea.value = JSON.stringify(data.message);
          break;
        default:
          console.log(e);
      }
    }
  };

  handleDragOver = function(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = "copy";
  };

  worker = new Worker('JS/worker.js');

  worker.terminate();

  handleDrop = function(e) {
    var file, reader, _fn, _i, _len, _ref;
    e.stopPropagation();
    e.preventDefault();
    showModal();
    worker.terminate();
    worker = new Worker('JS/worker.js');
    reader = new FileReader();
    reader.onload = function(e) {
      var img;
      showModal();
      img = new Image();
      img.onload = function() {
        var imgdat, packet;
        worker.addEventListener("message", onMessage, false);
        setCanvasSize(img.width, img.height);
        ctx.drawImage(img, 0, 0, img.width, img.height);
        imgdat = ctx.getImageData(0, 0, img.width, img.height);
        packet = {
          type: "init",
          data: {
            width: imgdat.width,
            height: imgdat.height,
            data: imgdat.data
          }
        };
        worker.sendPacket(packet);
        textarea.value = "";
        hideModal();
      };
      img.src = e.target.result;
    };
    _ref = e.dataTransfer.files;
    _fn = function(file) {
      return reader.readAsDataURL(file);
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      _fn(file);
    }
  };

  container.addEventListener("drop", handleDrop, false);

  container.addEventListener("dragover", handleDragOver, false);

  onClick = function(item, func) {
    document.getElementById(item).onclick = func;
  };

  onClick('binarize', function() {
    showModal();
    worker.sendCommand('binarize');
  });

  onClick('getbitmap', function() {
    showModal();
    worker.sendCommand('getbitmap');
  });

  onClick('skeleton', function() {
    showModal();
    worker.sendCommand('skeleton');
  });

  onClick('mark', function() {
    showModal();
    worker.sendCommand('mark');
  });

  onClick('close', function() {
    showModal();
    worker.sendCommand('close');
  });

  onClick('open', function() {
    showModal();
    worker.sendCommand('open');
  });

}).call(this);
